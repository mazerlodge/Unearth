S1 POA - Unearth

- Target environment is command line Objective-C.
	-- See CmdLineWithObjects project for stub template 
				
- Organization of Components, Issues, Challenges, Subsystems (CICS?)
	-- Game foundation; e.g. board, players, core play sequence driver (aka engine)
	-- Rules engine (e.g. tracks delver card in play modifies turn to allow re-roll)
	-- Game specific components 
		(Delvers, ruins, ruin end cards, delver cards, stones, player stone placement map, wonders)


==== Activity Log - 201806 - 201809 ====

06/16 (S) 
    - Created project stub and Github repository
    - Created initial object library text file
    - Expanded .gitignore to omit .pdf and /bin folder

06/18 (M)
    - Expanded main to include packaging of arguments into ArgParser
    - Added argParser class files to project
    - Created stub of validateArguments() function
    - Corrected bug in string comparision of ArgParser's doesArg: haveValue: method

06/20
    - Expanded ToDo list and removed completed items
    - Added Random Engine class files to project

07/01
    - Reorg POA next tasks
    - Started use cases document (help drive class method definition) 0616
    - Created stub of game factory and engine classes (see Object Library.txt) 0616
    - Modify main.m to invoke game engine class 0616
    - Expanded main's validateArguments() function 0620

07/23 (M)
    - Make UGF earlier in main() so it can replace showUsage() & validateArgs() found locally in main.m 0701
    - Move validate arguments logic into UGF class 0701
    - Move showUsage() message generation to UGF class 0701

08/15
    - Created ArgParser.populateArgParserFromString() method, to be used by UGF.makeGame() method 0701

08/19
    - Decided on technique for storing static string info (e.g. card data) in plists
    - Expanded POA
    - Tested ability to define and reach typedef enumerations (see UnearthPlayer.h and UGF.m)
    - Stubbed out remaining classes

08/31
    - added test case to read scanf() input in a limited fashion.
    - streamlined startup to accept -action defaultstartup and select makeGame() or makeGamewithArgs() appropriately.
    - added doTest() hook and moved existing test code to two methods
    - added validateArguments test for doTest requiring test number be specified in -test argument

09/02
    - Stubbed in CommandLineInterface (CLI) class
    - Added test 3 to excercise CLI class

09/23
    - Added note file with ID, text and count of delver cards.

10/05
    - Used Sklyar/DictionaryPatternToPList project to convert Delver card text to plist.
    - Added data directory to project and put DelverCards.plist in it.

10/13
    - Search // TDOO: for additional tasks

10/21
    - Made AP.dumpArgs method & invoked in UGF.validateArguments()

11/02
    - Added test cases to read delver card plist files using hard coded folder.

11/03
    - Added/modified test cases to load delver cards from NSURL instead of NSString
    - Added test cases to read plist files from relative path of build folder.
    - Added test cases to read from NSBundle, and modified build instructions to copy QData folder to output dir
    - Added test to get app support folder (/Library/App Support...) and create Unearth folder and log file there.
    - Added populating of dictionary member for QConfig data in UGF class and added CLI member as well.
    - Replaced printf() calls in UGF for testscanf() function w/ CLI methods
    - Moved default startup params to QConfig file

11/11
    - Genericized card reading from plist into generic getDataForQConfigKey(), to be reuable across all card data files.

11/17
    - Deprecated UGF.makeGame() by changing name to z_makeGame() and added comment, b/c need arg Parse 0 for exec path
    - Cleaned up startup flow to preserve path in zero param and swap out remaining args when action is defaultStart
    - Added gameState as string in UGE and method to set it.
    - Started stubbing in UGF.populateFactoryMembers(), added 38 cards to delverDeck (just rawData Populated)

11/18
    - Added End of Age card class stub, deck plist, and method to poplate in the factory class.
    - Corrected bug in UGF.getDataForQConfigKey, method was disreagrding key passed in when locating data file.

11/23
    - Added method to factory class to populate ruin cards
    - Added method to factory class to populate wonder deck (and created associated plist)

11/25
    - Populated stone bag in factory and added test method (test ID=10) to verify randomization
    - Created initial player population from CLI in factory and game engine init passing dictionary w/ game setup

12/15
    - Validated input before building player in UGF and exposed player die and name in player class.

12/23
    - Changed some startup messages to be debug messages.
    - Expanded UGF.showUsage() message.
    - Updated task list (below)
    - Initated [Task Notes - Test Player Hex Map.txt]
    - Created use case U1 (testing player map) 
    - Cleaned up use cases and associated ToDo list with UCs (below)
    
== 2019 == 
01/12 
	- Moved default start detection to ugf.validateArguments() from UGF.makeGameWithArgs()
	- Added -debuglevel to arguments, included in default start
	- Refactored UGF.debugMsg() calls to include a message level.
	- Added evaluation of startup action in main() to only start game if action was 'playgame'
	- Added basic stub of UGF.testPlayerMap()

01/26
	- Refactored, changed name of UnearthPlayerHexMap to just HexMap
	- Refactored, changed UnearthPlayerHexCell to just HexCell
	- Check in test, last one didn't complete correctly.

02/02
	- Added code to HexMap, HexCell, and HexTile supporting getAvailableHexCells functionality.
	- Expanded UGF.testPlayerMap() to report available cells after adding stone at origin.

02/16
	- Corrected HexDirection enumeration to only contain 6 directions, saved original as OctDirection
	- Expanded textPlayerMap() w/ additional stone placement code.
	- Added HexCellDirection class to support relative direction finding from cells
	- Moved HexDirection enumeration into its own header file to avoid circular ref w/ map and cell and position
	- Added multiple toString() methods
	- Added multiple Enum to String methods.
	- Completed UGF.testPlayerMap()
	
03/29 
	- Created addNeighborsToCell method (moved code block from addStone_atHexCell)
	- Tested branch creation within XCode 	
	- Updated TODO list and cleaned up comments 
	- Set priority, next up is drawMap() method of CLI class 
	- Moved drawMap() method from CLI to HexMap, avoid circular reference
	- Stubbed in drawMap() method with basic stats output 

03/30 
	- Added put method to CLI with 'addNewline' boolean flag parameter 
	- Fixed bug in getNeighborCells (had an x/y reversal issue) 
	- Added dedupe to getAvailableHexCells() results (two occupied cells often share a neighbor).

04/27
	- Typo fix in CommandLineInterface.m comment text.
    - Removed commented out code block in UGF.makeGameWithArgs(), code moved to validateArguments().
    - Updated Doco/Startup Flow.txt to reflect current codebase. 
    - Updated HexCell.getRowPosition() & .getColumnPosition() to pull from pos member var.
    - Addded constructors and toString handler to focus on use of position instead of rowY and columnX 
    - Added minRow and minCol detection to HexMap.generateStatsMessage() 
    - Added public debug message methods to CLI and move method out of UGF.
    - Updated CLI's debug settings after reading default startup parameters.
    - Added cell printing as text in grid order 
    - Added a static cell output with borders 
    - First attempt at dynamic rendering, WIP. 
    - Interlaced bottom of first row w/ top of second row, & repeated down grid.

04/28
    - Corrected rendering of map with locations in each cell (just after midnight).
    - Added printing of occupied marker (as asterisk).
    - Added Stone.getStoneColorAsShortString() method.
    - Replaced printing cell position with stone color and ID. 
    - Added sample output to Doco folder. 

06/01
    - Fleshed out addWonder() methods in Hex Map 
    - Added code to parse wonder member vars from raw data 
    - Added code to convert WonderType to/from strings 
    - Added code to Map to display wonder tiles
    - Added printing of wonder information in HexMap.drawCell() method. 
    - Expanded wonder deck to include distinct entries for each lesser and greater wonder. 
    - Expanded Wonder.populateWonderFromString() to set point value & id for lesser/greater, 
    - Added #define constants for min stone and wonder IDs 

06/22 
    - Expanded and reorg'd use cases file and POA 'Next' section 
    
07/05
    - Diag startup error when ran from command line, issue traced to no sym link to QData folder from bin 
    - Fixed data file name used in test 6 (correct name is _QDelverCards.plist) 
    - Added code to each populate...Deck() method to return false if 0 cards in deck.
    - Added code to terminate game if decks are not populated. 
    - Added passing of cli from UGF to UGE.

09/15
    - Created S1 - What Next 20190915.txt
	- Added UGF.shuffleDeck() method and invoked in UGF methods that make decks.
	- Added passing delverDeck and ruinsDeck from UGF to UGE.
	- Added exposing base card ID to DelverCard class
	- Added addDelverCard() and playDelverCard() methods to UnearthPlayer class.
	- Added doInitialGameSetup() to UGE and invoked from go(), added dealing initial two delver cards to each player

10/05
    - Added code to give each player a ruin card at game start and required related methods.
    
11/17
	- Added code to put initial 5 ruin cards in the box during UGE.doInitialGameSetup()
	- Added code to put next 5 ruin cards on the table during UGE.doInitialGameSetup()

11/30
	- Draw stones from the bag and put them on the ruin cards on the table (according to stone value)
	- Put named wonder cards on the table equal to (number of players + 2) 
	- Put the shuffled lesser and greater wonder cards in the UGE. 
	- Determine who goes first by having each player roll a d6 (Rules don't specify which die)

12/26
    - Created framework for gameplay loop
	- Changed GameState to be an enumeration, defined in UGE.
	- Added initial version of game engine loop in go() w/ call to doPlayerTurn() and subsequent fn()s.
    - Added enumerations for PlayerActions, PlayerActionTargets, PlayerActionTargetLocations
    - Added methods to UnearthPlayer for parsePlayerActionTargetFromString
    - Added methods to UnearthPlayer for parsePlayerActionFromString
    - Added methods to UnearthPlayer for parsePlayerActionTargetLocationFromString

== 2020 ==
01/10
    - Added member variable to Wonder to hold title & included in toString() method 

01/11
    - Changed PlayerAction enum to PlayerActionVerb, freeing variable name for use in struct 
    - Bundled PlayerActionVerb, PlayerActionTarget, and PlayerActionLocation into struct PlayerAction 
    - Updated existing PlayerAction... references to use struct 
    - Stubbed in shell of AI player turn to report not implemented and end turn 
    - Updated POA next steps 
    - Add not implemented msg in AI Player Delver and Execution Phases. 
    - Added confirmation before setting game state to quit.
    - Add ability to output wonders on table as ID and Title only 
    - Add ability to output list of delver cards with each card as a single line of text 

02/02
    - Resolved issue with cli.getStr() only getting text up to space. e.g. 'show delver hand' = 'show' 

09/12/20
	- Cleaned up gathering player info, consistent spacing after prompts
	- Added protection for null player name input and null player count input
	- Added dieSet construction and assignment to the player in UGF.makePlayer()
	- Refactored CLI.getFloat() and CLI.getInt() to handle non-numeric input.

09/13
	- Cleaned up gathering player info, consistent spacing after prompts
	- Added protection for null player name input and null player count input
	- Added dieSet construction and assignment to the player in UGF.makePlayer()
	- Refactored CLI.getFloat() and CLI.getInt() to handle non-numeric input.
	- Fleshed out delver die to init, store, and expose die color and size

11/21
	- Cleaned up POA & updated raw TODO marker list.

12/19
	- Implement command "show dice in hand"
	- Added toString class methods for all enums (that didn't have them yet).
	- Expanded UGE.doAction() to include default action locations for show wonder, ruins, delver, and dice
	- Modified includes referencing HexDirection.h to include check for ndef
	- Moved enum toString() methods to top of their classes where they weren't already.

12/23
	- Add HexMap to UnearthPlayer and expose showWonders() method to continue UGE.doActionShow:player()
	- When parsing command, allow the word 'table' to mean 'board'.
	- Added support for show ruins on board or in hand, show wonders on board or in hand
	- Add Examine action to view details of an object by ID, initial version supports Wonders
	- Wonder 95 (310) had a typo in the descriptive text (Word 'wroth' instead of 'worth')

== 2021 ==

02/21
	- Added ID to Ruin Cards, to be used as target for rolling a die at the card.
	
04/18
	- Added ability to display details of wonders either in hand or on the table.
	
07/17
	- Trimmed whitespace from wonder pattern, title and description
	- Added 'examine' to list of commands returned by help in UnearthPlayer
	- In UGE, added setting of default action targetLocation in doActionExamine:player() method.
	- Added to 'ToDo' list in POA.
	
09/03
	- In UGE.doActionShow:player added default case for not yet implemented PlayerActionTargets...
	- Also cleaned up order of switch/case blocks, made them alphabetical.
	- Expanded Delver Die class to include die to string/number and vice versa methods
	- Changed delver die enumeration to be based on die sizes
	- Added getDieID method to Delver Die class.
	- Expanded PlayerAction structure to include subject (used to hold die info for roll actions)
	- Verb 'roll...' responded with prompt, added UGE.doActionRoll:Player() stub w/ many TODOs

09/05
	- Take a die from the player of the size specified and put it on the target ruin specified. (3h)

== 2022 ==
05/25
	- Minor fix to message output to CLI when asking player if they want to see delver cards

05/27
	- Added "show board" (board added as a target)
	- tested roll at ruin
	- stubbed in claiming of a ruin

06/11
	- Corrected 'roll D8 at 113' returns "Die of size specified is not valid."
	- Added Ruins as target for 'examine' command 
	- Added show ruin 113 shows only ruin 113
	- After roll at card show the ruin
	- Made command 'show die in hand' work same as 'show dice in hand'
	
07/02
	- Added return of dice to players after ruin is claimed
	- Added stub of UGE.returnStonesFromCard()

== 2024 ==
02/25
	- Test run and reviewed progress/next steps
	- Proposal: delver cards be handled by putting all moves on a 'stack', execute from stack
	
11/16
	- Init class diagram using Draw.IO
	
11/17
	- Expanded class diagram w/ RandomEngine, CLI, DelverDie and assoc. enums, DelverCard
	- Started code to move card from table to player's hand when claimed.
	- Added code to remove ruin card from the table when claimed by a player
	- Converted ruinsOnTable array to be Mutable Array (allowing add/remove) 

11/20
	- Expanded Player to have a 'stones' array
	- Expanded UGE.doActionRoll() to give player a stone from ruin when rolling a 1, 2, or 3 (or bag if no stones on ruin)

11/23
	- Corrected handling of roll values 1, 2, 3, now getting stone from card & if none avail, get from bag.
	- Corrected [Object Library.txt], method name getNextStone() on class StoneBag
	- Expanded RuinCard, added getStoneByID() and getStoneCount() methods
	- Added putting stones on player's hex map
	
11/30
	- Improved map rendering (still needs work)
	
> In-Progress:
	.-- Issue, drawing of map renders wrong.
		N-- But works perfectly when ran from command line ~/bin/unearth -action dotest -test 12
		.-- Add a debug action that allows adding stones to the map to speed up rendering
			N-- Use random stones drawn from the bag; e.g. Action: debug (when -debug enabled) then go to add stone
			
	- Roll at target
		/-- Flesh out UGE.doActionRoll:player()
			X-- Take a die from the player of the size specified and put it on the target ruin specified. (3h)
			X-- Check the ruin to see if it has been claimed, if so give it to the appropriate player
			X-- If ruin claimed, retun dice to owning players.
			X-- If ruin claimed, return any remaining stones to the bag
			.-- If claimed, get the next ruin from the deck/stack, prep it (add stones), and place it on the table.
			.-- Expand w/ handling delver card influence on roll

> Next: (Note: UC=Use Case)
	- Enhancement, should be able to 'show card(s)  in hand' same as 'show ruin in hand'
		N-- Only show ruin in hand works ATM.

	- Light stuff
		.-- Clean up order of methods in UGE, alphabetical.
		
	- Utility Stuff
		.-- Add method to random engine to set seed to current ms time
		
	- Enhancement 'maybe' stuff
		.-- UP.parsePlayerActionVerbFromString always returns first verb occurrence, e.g. show delver help = help.

	- Change Ruin Card on table display to shorter 'icon' form
		Current output when issuing $show ruins on table
		In UGE.doActionShow with verb=Show target=Ruin location=Board objectID=999
		(Severity: 5)
		Ruins on Table:
		Ruin Card id=112 color=Blue claimValue=13 cardStoneValue=2
		Stones on card:
			Stone id=35 color=Yellow
			Stone id=44 color=Blue

		Ruin Card id=119 color=Purple claimValue=17 cardStoneValue=3
		Stones on card:
			Stone id=17 color=Red
			Stone id=47 color=Blue
			Stone id=28 color=Yellow

		Ruin Card id=110 color=Blue claimValue=9 cardStoneValue=2
		Stones on card:
			Stone id=59 color=Black
			Stone id=37 color=Yellow

		Ruin Card id=118 color=Purple claimValue=15 cardStoneValue=3
		Stones on card:
			Stone id=65 color=Black
			Stone id=16 color=Red
			Stone id=46 color=Blue

		> Desired output
		Ruins on Table:
		Ruin Card id=112 color=Blue claimValue=13 cardStoneValue=2
		Stones on card: (Yel) (Blu)

		Ruin Card id=119 color=Purple claimValue=17 cardStoneValue=3
		Stones on card: (Red) (Blu) (Yel)

		Ruin Card id=110 color=Blue claimValue=9 cardStoneValue=2
		Stones on card: (Bla) (Yel)

		Ruin Card id=118 color=Purple claimValue=15 cardStoneValue=3
		Stones on card: (Bla) (Red) (Blu)

		

ln577
	
	- Show command w/ no options should list targets possible 0213
	- Roll should output some sort of message (even 'not yet implemented') 0213 

	- Add [cli getStr] like method that is getYN, validates y or n response and returns boolean.

    - Add ability to output ruins on table as rectangles with claim value, stone count, stones count by color 
        -- Invoked in player excavation phase 

    Use Cases F0 & F1, Flesh out UGE.go() with game engine loop at command line. 
        N-- See [Use Cases - Unearth.txt] 0601

    Administrivia; List make Game with args, what is already passed, what is needed. 0622



> Raw TODO markers:
	ArgParser.m: // TODO: Add check for arg (and assoc val) already in array
	ArgParser.m: // TODO: Make AP.isInArgs method case insensitive and add a ver w/ caseSensitive: true/false param.

	UnearthGameFactory.m: // TODO: This may need to get it's CLI from the one set up in the factory (UGF).
	UnearthGameFactory.m: // TODO: Expand gameDataDict dictionary used to pass info into game engine.

	UnearthGameEngine.m: // TODO: Add more dictionary parsing
	UnearthGameEngine.m: // TODO: Add some validation of the above, for now assume it worked
	UnearthGameEngine.m: // TODO: AI Considers playing delver card(s).
	UnearthGameEngine.m: // TODO: AI Considers wonders and ruin cards currently on the table
	UnearthGameEngine.m: // TODO: AI compute player action verb, target, and location.
	UnearthGameEngine.m: // TODO: Add any clean up with player action done (e.g. replace ruins taken in this turn)
	UnearthGameEngine.m: // TODO: Add method to handle rolling of dice.
	UnearthGameEngine.m: // TODO: add handling for showing more targets

	HexMap.m:	// TODO: Valiate the 'loop' meets the criteria for the wonder being placed.
	HexMap.m:	// TODO: Valiate the 'loop' meets the criteria for the wonder being placed.

	EndOfAgeCard.m:	// TODO: Add Delver Dice to output string.

	UnearthPlayer.m:	//TODO: Refactor this to get keywords into a single location
	UnearthPlayer.m:	//TODO: Refactor this to get keywords into a single location
	UnearthPlayer.m:	//TODO: Refactor this to get keywords into a single location

	RuinCard.m:	// TODO: Add Delver Dice to output string.


> Archived/Postponed/Cancelled Tasks:
    - Replace test numbers within UGF with enumeration 0902
    - Add call CLI from within validate args, eg collect test number 0909
    - Add debug logging class w/ output to file 0620 1103
    - Add -debug levels, if debug message is less than or equal to the level specified it prints. 0620
	- Should HexDirection.h be integrated into another header (e.g. consumer class's header)


