S1 POA - Unearth

- Target environment is command line Objective-C.
	-- See CmdLineWithObjects project for stub template 
				
- Organization of Components, Issues, Challenges, Subsystems (CICS?)
	-- Game foundation; e.g. board, players, core play sequence driver (aka engine)
	-- Rules engine (e.g. tracks delver card in play modifies turn to allow re-roll)
	-- Game specific components 
		(Delvers, ruins, ruin end cards, delver cards, stones, player stone placement map, wonders)


==== Activity Log - 201806 - 201809 ====

06/16 (S) 
    - Created project stub and Github repository
    - Created initial object library text file
    - Expanded .gitignore to omit .pdf and /bin folder

06/18 (M)
    - Expanded main to include packaging of arguments into ArgParser
    - Added argParser class files to project
    - Created stub of validateArguments() function
    - Corrected bug in string comparision of ArgParser's doesArg: haveValue: method

06/20
    - Expanded ToDo list and removed completed items
    - Added Random Engine class files to project

07/01
    - Reorg POA next tasks
    - Started use cases document (help drive class method definition) 0616
    - Created stub of game factory and engine classes (see Object Library.txt) 0616
    - Modify main.m to invoke game engine class 0616
    - Expanded main's validateArguments() function 0620

07/23 (M)
    - Make UGF earlier in main() so it can replace showUsage() & validateArgs() found locally in main.m 0701
    - Move validate arguments logic into UGF class 0701
    - Move showUsage() message generation to UGF class 0701

08/15
    - Created ArgParser.populateArgParserFromString() method, to be used by UGF.makeGame() method 0701

08/19
    - Decided on technique for storing static string info (e.g. card data) in plists
    - Expanded POA
    - Tested ability to define and reach typedef enumerations (see UnearthPlayer.h and UGF.m)
    - Stubbed out remaining classes

08/31
    - added test case to read scanf() input in a limited fashion.
    - streamlined startup to accept -action defaultstartup and select makeGame() or makeGamewithArgs() appropriately.
    - added doTest() hook and moved existing test code to two methods
    - added validateArguments test for doTest requiring test number be specified in -test argument

09/02
    - Stubbed in CommandLineInterface (CLI) class
    - Added test 3 to excercise CLI class

09/23
    - Added note file with ID, text and count of delver cards.

10/05
    - Used Sklyar/DictionaryPatternToPList project to convert Delver card text to plist.
    - Added data directory to project and put DelverCards.plist in it.

10/13
    - Search // TDOO: for additional tasks

10/21
    - Made AP.dumpArgs method & invoked in UGF.validateArguments()

11/02
    - Added test cases to read delver card plist files using hard coded folder.

11/03
    - Added/modified test cases to load delver cards from NSURL instead of NSString
    - Added test cases to read plist files from relative path of build folder.
    - Added test cases to read from NSBundle, and modified build instructions to copy QData folder to output dir
    - Added test to get app support folder (/Library/App Support...) and create Unearth folder and log file there.
    - Added populating of dictionary member for QConfig data in UGF class and added CLI member as well.
    - Replaced printf() calls in UGF for testscanf() function w/ CLI methods
    - Moved default startup params to QConfig file

11/11
    - Genericized card reading from plist into generic getDataForQConfigKey(), to be reuable across all card data files.

11/17
    - Deprecated UGF.makeGame() by changing name to z_makeGame() and added comment, b/c need arg Parse 0 for exec path
    - Cleaned up startup flow to preserve path in zero param and swap out remaining args when action is defaultStart
    - Added gameState as string in UGE and method to set it.
    - Started stubbing in UGF.populateFactoryMembers(), added 38 cards to delverDeck (just rawData Populated)

11/18
    - Added End of Age card class stub, deck plist, and method to poplate in the factory class.
    - Corrected bug in UGF.getDataForQConfigKey, method was disreagrding key passed in when locating data file.

11/23
    - Added method to factory class to populate ruin cards
    - Added method to factory class to populate wonder deck (and created associated plist)

11/25
    - Populated stone bag in factory and added test method (test ID=10) to verify randomization
    - Created initial player population from CLI in factory and game engine init passing dictionary w/ game setup

12/15
    - Validated input before building player in UGF and exposed player die and name in player class.

12/23
    - Changed some startup messages to be debug messages.
    - Expanded UGF.showUsage() message.
    - Updated task list (below)
    - Initated [Task Notes - Test Player Hex Map.txt]
    - Created use case U1 (testing player map) 
    - Cleaned up use cases and associated ToDo list with UCs (below)
    
== 2019 == 
01/12 
	- Moved default start detection to ugf.validateArguments() from UGF.makeGameWithArgs()
	- Added -debuglevel to arguments, included in default start
	- Refactored UGF.debugMsg() calls to include a message level.
	- Added evaluation of startup action in main() to only start game if action was 'playgame'
	- Added basic stub of UGF.testPlayerMap()

01/26
	- Refactored, changed name of UnearthPlayerHexMap to just HexMap
	- Refactored, changed UnearthPlayerHexCell to just HexCell
	- Check in test, last one didn't complete correctly.


	
> In-Progress:
    - UC U1. Populate a player map with a lesser wonder surrounded with a mix of colors
        -- Test Player Hex Map, see [Task Notes - Test Player Hex Map.txt] 0819
        -- Unearth Player Hex Map, flesh out Hex Map addStone method 1223
        -- Unearth Player Hex Map, flesh out Hex Map addWonder method 1223
        -- Implement drawMap() method of CLI class, see TODO marker. 0902

> Next: (Note: UC=Use Case)
    - UC E1, Make AP.isInArgs method case insensitive & add a ver w/ a caseSensitive: T/F param 1013
    - UC E2, ArgParser.addArgsFromString(), Add check for arg (and assoc val) already in array 1117
    - UC U2, UGF.makeGameWithArgs() add to gameDataDict dictionary used to pass info to UGE and parse it in UGE. 1223
    - UC D1, Expand [Object Library.txt] with as built information 1223
    - UC D2, Create additional Use Cases (help drive class method definition) [S1 Use Cases - Unearth.txt] 1223

> Archived/Postponed/Cancelled Tasks:
    - Replace test numbers within UGF with enumeration 0902
    - Add call CLI from within validate args, eg collect test number 0909
    - Add debug logging class w/ output to file 0620 1103
    - Add -debug levels, if debug message is less than or equal to the level specified it prints. 0620


